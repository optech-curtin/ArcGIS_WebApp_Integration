"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3076],{83076:(e,t,r)=>{r.r(t),r.d(t,{default:()=>E});var o=r(81856),i=r(48767),l=r(39166),s=r(21892),n=r(92753),a=r(90525),y=r(91838);r(57845),r(61939),r(33638);var p=r(53480),u=r(12709),d=r(61414),h=r(71760),c=r(64171),S=r(24743),m=r(2043),v=r(54882),f=r(6255),g=r(23281),_=r(76572),M=r(41989),b=r(59276),C=r(71230),A=r(22191),Z=r(6015);let k=["atom","xml"],w={base:Z.A,key:"type",typeMap:{"simple-line":C.A},errorContext:"symbol"},G={base:Z.A,key:"type",typeMap:{"picture-marker":M.A,"simple-marker":A.A},errorContext:"symbol"},P={base:Z.A,key:"type",typeMap:{"simple-fill":b.A},errorContext:"symbol"},x=class extends(0,S.dM)((0,f.J)((0,m.q)((0,v.A)((0,g.j)((0,s.P)(c.A)))))){constructor(...e){super(...e),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}readFeatureCollections(e,t){return t.featureCollection.layers.forEach(e=>{let t=e.layerDefinition.drawingInfo.renderer.symbol;t&&"esriSFS"===t.type&&t.outline?.style.includes("esriSFS")&&(t.outline.style="esriSLSSolid")}),t.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){let e=this._get("title");return e&&"defaults"!==this.originOf("title")?e:this.url?(0,a.e7)(this.url,k)||"GeoRSS":e}set title(e){this._set("title",e)}load(e){let t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(n.QP).then(()=>this._fetchService(t)).then(e=>{this.read(e,{origin:"service"})})),Promise.resolve(this)}async hasDataChanged(){let e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){let t=this.spatialReference,{data:r}=await (0,l.A)(i.A.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:(0,h.oT)(t)?void 0:t.wkid??JSON.stringify(t)},signal:e});return r}_hasGeometry(e){return this.featureCollections?.some(t=>t.featureSet?.geometryType===e&&t.featureSet.features?.length>0)??!1}};(0,o._)([(0,y.MZ)()],x.prototype,"description",void 0),(0,o._)([(0,y.MZ)()],x.prototype,"featureCollections",void 0),(0,o._)([(0,p.w)("service","featureCollections",["featureCollection.layers"])],x.prototype,"readFeatureCollections",null),(0,o._)([(0,y.MZ)({type:d.A,json:{name:"lookAtExtent"}})],x.prototype,"fullExtent",void 0),(0,o._)([(0,y.MZ)(_.id)],x.prototype,"id",void 0),(0,o._)([(0,y.MZ)(_.fV)],x.prototype,"legendEnabled",void 0),(0,o._)([(0,y.MZ)({types:w,json:{write:!0}})],x.prototype,"lineSymbol",void 0),(0,o._)([(0,y.MZ)({type:["show","hide"]})],x.prototype,"listMode",void 0),(0,o._)([(0,y.MZ)({types:G,json:{write:!0}})],x.prototype,"pointSymbol",void 0),(0,o._)([(0,y.MZ)({types:P,json:{write:!0}})],x.prototype,"polygonSymbol",void 0),(0,o._)([(0,y.MZ)({type:["GeoRSS"]})],x.prototype,"operationalLayerType",void 0),(0,o._)([(0,y.MZ)(_.OZ)],x.prototype,"url",void 0),(0,o._)([(0,y.MZ)({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],x.prototype,"title",null),(0,o._)([(0,y.MZ)({readOnly:!0,json:{read:!1},value:"geo-rss"})],x.prototype,"type",void 0);let E=x=(0,o._)([(0,u.$)("esri.layers.GeoRSSLayer")],x)}}]);